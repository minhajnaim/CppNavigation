/* Generated by Together */

#include <iostream>
#include <stdlib.h>
#include <string>
#include "CPOI.h"
#include <climits>
#include <vector>
using namespace std;

#include "CRoute.h"


CRoute::CRoute()
{
//	m_maxWp=maxWp;
//	m_maxPoi=MaxPoi;
//	m_nextWp=0;
//	m_nextPoi=0;
//	m_pPoiDatabase=0;
//		m_pWaypoint= new CWaypoint[m_maxWp];
//		m_pPoi = new CPOI*[m_maxPoi];

}

void CRoute::writeToFile(string filename,const CCodec& coder)
{
//	string hello1=filename;
	fstream myFile;

	  myFile.exceptions ( std::ifstream::failbit | std::ifstream::badbit );
	  try {
	myFile.open(filename.c_str(),fstream::out);
//   myFile <<"hello"<<endl;
//	CIndentCodec av;
	coder.write(myFile,m_pWaypoint,m_pPoi);

myFile.close();}

catch (std::ifstream::failure &e) {
	    std::cerr << "Exception opening/reading/closing file\n";
}}

void CRoute::readFromFile(string filename,bool deleteOldData,const CCodec& coder)
{
	if(deleteOldData==true)
	{m_pPoi.clear();
	m_pWaypoint.clear();}
	vector <CPOI> tempPoi;
	cout << "Now starting to read line by line..." << endl;


	fstream myFile;
	myFile.exceptions (std::ifstream::badbit );
	try {
	myFile.open(filename.c_str(),fstream::in);
		coder.read(m_pWaypoint,tempPoi,myFile);
		for(int i=0;i<tempPoi.size();i++)
		{m_pPoiDatabase->addPoi(tempPoi[i].getType(),tempPoi[i].getName(),tempPoi[i].getDescription(),tempPoi[i].getLatitude(),tempPoi[i].getLongitude());
		addPoi(tempPoi[i].getName());}

		myFile.close();
}

	 catch (std::ifstream::failure &e) {
	 	    std::cerr << "Exception opening/reading/closing file\n";
	 }
}

CRoute::~CRoute()
{
}
CRoute::CRoute(const CRoute& Origin)
{
}

void CRoute::ConnecttoPoiDatabase(CPOIDataBase* pPoiDB)
{
	m_pPoiDatabase=pPoiDB;
}


void CRoute::addwaypoint(const CWaypoint& wp)
{

	m_pWaypoint.push_back(wp);
//	m_nextWp++;
}

void CRoute::addPoi(string namePoi)

		{if(m_pPoiDatabase!=0)
m_pPoi.push_back(m_pPoiDatabase->getPointerToPOI(namePoi)) ;
		else
		cout<<"not in pool"<<endl;}

double CRoute::getDistanceNextPoi(const CWaypoint& wp, CPOI& poi)
{
	double result,minimum=INT_MAX;
	unsigned int point=0,i;
	for( i=0;i<m_pPoi.size();i++)
		{result=m_pPoi[i]->calculateDistance(wp);
			if(result<minimum)
				{
				minimum=result;
				point = i;
				}
		}

	poi= *m_pPoi[point];
	return result;

}



void CRoute::print()
{/*cout<<"Our Route has "<<m_maxWp<<" waypoints and "<<m_maxPoi<<" Point OF Interests " <<endl;*/

//	vector<int>::const_iterator it;
//	vector<CWaypoint>::const_iterator it;
//		for (it=m_pWaypoint.begin(); it!=m_pWaypoint.end(); it++)
//		{
//			cout << " my element: " << *it << endl;
//		}

//		cout << "My element at 3 " << myIntVector.at(3) << endl;


//
	for(unsigned int i=0;i<m_pWaypoint.size();i++)
		{m_pWaypoint[i].print(2);}


	for(unsigned int i=0;i<m_pPoi.size();i++)
		{


            if(m_pPoi[i]!= NULL)
            {
                cout<<"===================="<<endl;
                cout<<"Point OF Interest"<<endl;
                cout<<"==================="<<endl;
                m_pPoi[i]->Print();
            }
        }
}



